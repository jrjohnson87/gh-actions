name: AWS Terraform
description: Runs Terraform against HackneyAWS
inputs:
  terraform_version:
    description: 'Version of Terraform to use'
    required: true
    default: 'latest'
#   terraform__state_s3_bucket_name:  
#     description: 'S3 bucket name to use for Terraform state'
#     required: true
#   aws_account:  
#     description: 'AWS Account to deploy'
#     required: true        
#   aws_iam_role:  
#     description: 'AWS IAM role to assume'
#     required: true    
#   terraform_path:  
#     description: 'Path of Terraform to run'
#     required: true
#   environment:  
#     description: 'Name of the environemnt to target'
#     required: true    

runs:
  using: "composite"
  steps:
#     - name: Setup Terraform
#       id: setup
#       working-directory: ${{ inputs.terraform_path }}
#       uses: hashicorp/setup-terraform@v1.2.1
#       with:
#         terraform_version: ${{ inputs.terraform_version }}
#         terraform_wrapper: true

#       - name: Configure AWS credentials for Account
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.aws_region }}
#           role-to-assume: ci-account_name-${{ github.event.client_payload.sha }}
#           role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
#           role-duration-seconds: 1200
#           role-session-name: GH-${{ env.GITHUB_WORKFLOW }}-${{ env.GITHUB_RUN_ID }}

    - name: Terraform Init
      id: init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.terraform_path }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      shell: bash
      working-directory: ${{ inputs.terraform_path }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      shell: bash
      working-directory: ${{ inputs.terraform_path }}      
      #continue-on-error: true

#     - uses: actions/github-script@0.9.0
#       if: github.event_name == 'pull_request'
#       env:
#         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#       with:
#         github-token: ${{ secrets.GITHUB_TOKEN }}
#         script: |
#           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#           #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
#           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

#           <details><summary>Show Plan</summary>

#           \`\`\`${process.env.PLAN}\`\`\`

#           </details>

#           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

#           github.issues.createComment({
#             issue_number: context.issue.number,
#             owner: context.repo.owner,
#             repo: context.repo.repo,
#             body: output
#           })

    - name: Terraform Apply
      id: apply
      run: terraform plan
      shell: bash
      working-directory: ${{ inputs.terraform_path }}      
      #if: contains('$default-branch', github.ref)
